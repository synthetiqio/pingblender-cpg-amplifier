services:
  core:
    restart: always
    build:
      context:  .
      dockerfile: Dockerfile
    container_name: 'signals'
    environment:
      - APP_ROUTER=${APP_ROUTER}
      - APP_ROUTE=${APP_ROUTE}
      - APP_CERTS=${APP_CERTS}
      - APP_RELOAD=${APP_RELOAD}
      - APP_PORT=${APP_PORT}
      - REQUESTS_CA_BUNDLE=${APP_CERTS}

      #added in for shell-b
      - DB_DRIVER=${POSTGRES_DRIVER}
      - DB_HOST=${POSTGRES_HOST}
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USERNAME=${POSTGRES_NON_ROOT_USER}
      - DB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    depends_on:
      - postgres
    networks:
      - synthetiq-agent
    ports:
      - "1010:1010"
      

  postgres:
    container_name: 'pgvector-pg16'
    image: pgvector/pgvector:pg16
    restart: always
    hostname : ${POSTGRES_HOST}
    environment:
      - POSTGRES_DRIVER=${POSTGRES_DRIVER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DB_PORT=${POSTGRES_PORT}
    ports:
      - "5432:5432"
    volumes:
      #- ./init-data.sh:/docker-entrypoint-initdb.d/initdb.sh
      #- ./signals/module/medicine/hcp/install/init-data.sql:/docker-entrypoint-initdb.d/initdb.sql
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - synthetiq-agent
    # healthcheck:
    #   test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
    #   interval: 5s
    #   timeout: 5s
    #   retries: 10

networks:
  synthetiq-agent:
    name: synthetiq-agent
    driver: bridge