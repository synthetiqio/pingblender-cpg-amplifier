services:
  core:
    restart: always
    build:
      context:  .
      dockerfile: Dockerfile
    container_name: 'signals'
    environment:
      - APP_ROUTER=${APP_ROUTER}
      - APP_ROUTE=${APP_ROUTE}
      - APP_CERTS=${APP_CERTS}
      - APP_RELOAD=${APP_RELOAD}
      - APP_PORT=${APP_PORT}
      - REQUESTS_CA_BUNDLE=${APP_CERTS}
      - DOCKERIZED=true
      #added in for shell-b
      - DB_DRIVER=${POSTGRES_DRIVER}
      - DB_HOST=${POSTGRES_HOST}
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USERNAME=${POSTGRES_NON_ROOT_USER}
      - DB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    depends_on:
      - postgres
      #- canvas
    volumes:
      - ./cert:/usr/local/share/ca-certificates/
      - ./local/canvas/share/file:/home/site/shared-volume/canvas
      - ./local/graffiti:/home/site/shared-volume/files
      - /venv
    links:
      - "postgres"
    networks:
      - synthetiq-agent
    ports:
      - "${APP_PORT}:${APP_PORT}"


  frontend:
    #this is the FastAPI template modified for use here.
    profiles: ['development']    
    build:
      context: ./cpg/
      env:  ./cpg/.env
      dockerfile: Dockerfile
      target: development 
      args:
        - NODE_ENV=develoment
        - VITE_API_URL=${VITE_API_URL}
        - VITE_IMG_PATH=${VITE_IMAGE_PATH}
    restart: always
    depends_on:
      - postgres 
    ports:
      - "${CPG_PORT}:${CPG_PORT}"
    environment:
        - NODE_ENV=develoment
        - WEB_PORT=${CPG_PORT}
        - VITE_API_URL=${VITE_API_URL}
        - VITE_IMG_PATH=${VITE_IMAGE_PATH}

    
  


  postgres:
    container_name: 'pgvector-pg16'
    image: pgvector/pgvector:pg16
    restart: always
    hostname : ${POSTGRES_HOST}
    environment:
      - POSTGRES_DRIVER=${POSTGRES_DRIVER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DB_PORT=${POSTGRES_PORT}
    ports:
      - "5432:5432"
    volumes:
      - ./cert:/etc/ssl/certs
      - ./local/canvas/share/db:/home/site/shared-volume/db
      - ./signals/db/pgdata:/var/lib/postgresql/data
      - ./shell/init-data.sh:/docker-entrypoint-initdb.d/initdb.sh
    networks:
      - synthetiq-agent
    # healthcheck:
    #   test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
    #   interval: 5s
    #   timeout: 5s
    #   retries: 10


  graph:
    image: neo4j:latest
    container_name: "neo4j-graphdb-latest"
    volumes:
        - ./cert:/etc/ssl/certs
        - ./signals/local/canvas/share/graph:/home/site/shared-volume/graph
        - ./signals/local/graph/logs:/logs
        - ./signals/local/graph/config:/config
        - ./signals/local/graph/data:/data
        - ./signals/local/graph/plugins:/neo4j/plugins:/plugins
    environment:
        - NEO4J_AUTH=${NEO4JU}/${NEO4JP}
    ports:
      - "7474:7474"
      - "7473:7473"
      - "7687:7687"
    networks:
      - synthetiq-agent

  canvas:
    image: naskio/n8n-python:latest
    container_name: 'n8n-canvas'
    restart: always
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_PASSWORD}
      - N8N_SSL_KEY=${REQUESTS_CA_BUNDLE}
      - DB_TYPE=${POSTGRES_TYPE}
      - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_PORT=${POSTGRES_PORT}
      - NODE_FUNCTION_ALLOW_EXTERNAL=axios,qs
    ports:
      - 5678:5678
    volumes:
      - ./cert:/etc/ssl/certs
      - ./signals/local/canvas/share:/home/site/shared-volume
      - ./signals/local/azurite/data:/home/site/shared-volume/azurite
      - ./signals/local/canvas/data:/home/site/local-volume/canvas
    networks:
      - synthetiq-agent

networks:
  synthetiq-agent:
    name: synthetiq-agent
    driver: bridge